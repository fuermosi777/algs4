#!/usr/local/bin/node

/**
 * Use leetcode-cli to list, show, test and submit solutions.
 * Need to do some changes since it creates file names that cannot be accepted by Intellij IDEA
 */

const fs = require('fs');
const { spawnSync } = require('child_process');
const path = require('path');
const LANG = 'java';

let args = process.argv.slice(2);

if (args.length <= 0) {
    exit('Options: list | show | test | submit');
}

let option = args[0];

if (option === 'list') {
    spawnSync('leetcode', ['list'], {stdio: "inherit"});
} else {
    let jsonFileLocation = path.join(process.env.HOME || process.env.USERPROFILE, '.lc', 'all.json');
    if (!fs.existsSync(jsonFileLocation)) {
        exit(`No ${jsonFileLocation} file found. Run ./lc list first.`);
    }

    if (args.length < 2) {
        exit('Options: shoew 12 | test 12 | test 12 \'xxx\' | submit 12');
    }

    let problemNum = args[1];
    problemNum = parseInt(problemNum);
    if (!problemNum || problemNum <= 0) {
        exit('Problem number must be a positive integer');
    }
    let json = JSON.parse(fs.readFileSync(jsonFileLocation, 'utf-8'));
    let problem = findByKey(json, 'id', problemNum);
    let subjectFileName = `${problemNum}.${problem.key}.${LANG}`;
    let solutionFolderLoc = `./src/leetcode/${LANG}/Q${problemNum}`;
    let solutionFileLoc = `${solutionFolderLoc}/Solution.${LANG}`;

    if (option === 'show') {
        if (fs.existsSync(solutionFileLoc)) {
            exit(`Solution already exists: ${solutionFileLoc}`);
        }

        if (!fs.existsSync(solutionFolderLoc)) {
            fs.mkdirSync(solutionFolderLoc);
        }

        spawnSync('leetcode', ['show', problemNum, '-x', '-g'], {stdio: 'inherit'});
        let placeholderText = fs.readFileSync(`./${subjectFileName}`, 'utf-8');
        placeholderText = `package Q${problemNum};\n${placeholderText}`;
        fs.writeFileSync(`./${subjectFileName}`, placeholderText, 'utf-8');
        fs.renameSync(path.join(__dirname, subjectFileName), solutionFileLoc);
    } else if (option === 'test') {
        if (!fs.existsSync(solutionFileLoc)) {
            exit(`Solution NOT exists. Run show first`);
        }

        let testCases = args.length === 3 ? args[2] : '';
        spawnSync('cp', [solutionFileLoc, `./${subjectFileName}`], {stdio: 'inherit'});

        let solutionText = fs.readFileSync(`./${subjectFileName}`, 'utf-8');
        solutionText = solutionText.split('\n').filter(line => !line.startsWith('package')).join('\n');
        fs.writeFileSync(`./${subjectFileName}`, solutionText, 'utf-8');
        spawnSync('leetcode', ['test', `./${subjectFileName}`, '-t', testCases], {stdio: 'inherit'});
        fs.unlinkSync(`./${subjectFileName}`);
    } else if (option === 'submit') {
        if (!fs.existsSync(solutionFileLoc)) {
            exit(`Solution NOT exists. Run show first`);
        }

        let testCases = args.length === 3 ? args[2] : '';
        spawnSync('cp', [solutionFileLoc, `./${subjectFileName}`], {stdio: 'inherit'});

        let solutionText = fs.readFileSync(`./${subjectFileName}`, 'utf-8');
        let processedSolutionText = solutionText.split('\n').filter(line => !line.startsWith('package')).join('\n');
        fs.writeFileSync(`./${subjectFileName}`, processedSolutionText, 'utf-8');
        spawnSync('leetcode', ['submit', `./${subjectFileName}`], {stdio: 'inherit'});
        fs.unlinkSync(`./${subjectFileName}`);
    }
}

function findByKey(arr, keyName, keyValue) {
    return arr.filter(item => item[keyName] === keyValue)[0];
}

function exit(msg) {
    console.log(msg);
    process.exit();
}